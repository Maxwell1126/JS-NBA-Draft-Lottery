{"version":3,"sources":["Redux/Reducers/FinalPlaceReducer.js","Redux/Reducers/statsReducer.js","Redux/Reducers/selectedStat.js","Redux/Reducers/totalSimsReducer.js","Redux/Reducers/index.js","Redux/Sagas/statsSaga.js","Redux/Sagas/FinalPlaceSaga.js","Redux/Sagas/index.js","SimLotteryButton/SimLotteryButton.js","LotteryTeams/LotteryTeams.js","Home/Home.js","Stats/StatTable.js","Stats/Stats.js","Nav/Nav.js","Header/Header.js","App.js","index.js"],"names":["DEFAULT_ORDER","name","seed","place","draftLotteryOrder","state","arguments","length","undefined","action","type","latestOrder","payload","console","log","i","DEFAULT_ARRAY","stats","id","selectedStat","DEFAULT_STATE","totalSims","rootReducer","combineReducers","getStats","getTopFour","getPlaces","getMode","getStatsSaga","response","regenerator_default","a","wrap","_context","prev","next","axios","get","sent","data","put","t0","stop","_marked","topFour","_context2","_marked2","setPlaces","_context3","post","_marked3","teamMode","_context4","_marked4","_context5","takeLatest","_marked5","addSimulation","getTotalSimulations","getLatestSimulation","deleteSimulations","finalPlaceSaga","simulation","getLatest","FinalPlaceSaga_marked","total","FinalPlaceSaga_marked2","FinalPlaceSaga_marked3","originalOrder","resetCount","resetStats","delete","FinalPlaceSaga_marked4","FinalPlaceSaga_marked5","rootSaga","all","Sagas_marked","SimLotteryButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","runLottery","event","draftOrder","first","second","third","fourth","winner","winningNumber","Math","floor","random","bottomTwelve","finalOrder","placeCounter","push","propComparator","prop","b","sort","dispatch","react_default","createElement","Button_default","variant","onClick","Component","connect","reduxStore","LotteryTeams","playerImage","map","team","tableContent","jumpedFell","className","TableRow_default","TableCell_default","Grid_default","container","xs","direction","justify","alignItems","item","src_SimLotteryButton_SimLotteryButton","Table_default","TableHead_default","TableBody_default","Home","oldWolves","newWolves","leftImage","rightImage","src_LotteryTeams_LotteryTeams","StatsTable","getStatByType","target","value","places","resetSimulations","simTotal","statSelector","onChange","disabled","selected","stat","count","parseInt","NaN","Stats","StatTable","Nav","navStyle","react_router_dom","to","Header","headerStyle","src_Nav_Nav","App","src_Header_Header","react_router","exact","from","path","component","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","apply","run","ReactDOM","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d1f3a035.chunk.js","sourcesContent":["const DEFAULT_ORDER =\n    [{ name: \"New York\", seed: 1, place: 1 },\n    { name: \"Cleveland\", seed: 2, place: 2 },\n    { name: \"Phoenix\", seed: 3, place: 3 },\n    { name: \"Chicago\", seed: 4, place: 4 },\n    { name: \"Atlanta\", seed: 5, place: 5 },\n    { name: \"Washington\", seed: 6, place: 6 },\n    { name: \"New Orleans\", seed: 7, place: 7 },\n    { name: \"Memphis\", seed: 8, place: 8 },\n    { name: \"Atlanta\", seed: 9, place: 9 },\n    { name: \"Minnesota\", seed: 10, place: 10 },\n    { name: \"Los Angeles\", seed: 11, place: 11 },\n    { name: \"Charlotte\", seed: 12, place: 12 },\n    { name: \"Miami\", seed: 13, place: 13 },\n    { name: \"Boston\", seed: 14, place: 14 }];\nconst draftLotteryOrder = (state = DEFAULT_ORDER, action) => {\n    switch (action.type) {\n        case 'SET_ORDER':\n            let latestOrder = action.payload;\n            console.log('database response', action.payload);\n            for (let i = 0; i < latestOrder.length; i++) {\n                if (latestOrder[i].seed == 9 && latestOrder[i].place < 5) {\n                    latestOrder[i].name = \"Dallas\";\n                } else if (latestOrder[i].seed == 9 && latestOrder[i].place > 4) {\n                    latestOrder[i].name = \"Atlanta\";\n                } else if (latestOrder[i].seed == 8 && latestOrder[i].place > 8) {\n                    latestOrder[i].name = \"Boston\";\n                } else if (latestOrder[i].seed == 8 && latestOrder[i].place <= 8) {\n                    latestOrder[i].name = \"Memphis\";\n                } else if (latestOrder[i].seed == 14 && latestOrder[i].place == 1) {\n                    latestOrder[i].name = \"Sacramento\";\n                } else if (latestOrder[i].seed == 14 && latestOrder[i].place != 1) {\n                    latestOrder[i].name = \"Boston\";\n                }\n            }\n            console.log('draft order', latestOrder);\n            state = latestOrder\n            return state;\n        case 'ORIGINAL_ORDER':\n            return DEFAULT_ORDER;\n        default:\n            return state;\n    }\n};\n\nexport default draftLotteryOrder;","const DEFAULT_ARRAY = [];\n\nconst stats = (state = DEFAULT_ARRAY, action) => {\n    switch (action.type) {\n        case 'SET_STATS':\n            state = action.payload;\n            return state;\n        default:\n            return state;\n        \n    }\n};\n\nexport default stats;","const DEFAULT_ARRAY =\n    [{ name: 'New York', id: 1 },\n    { name: 'Cleveland', id: 2 },\n    { name: 'Phoenix', id: 3 },\n    { name: 'Chicago', id: 4 },\n    { name: 'Atlanta', id: 5 },\n    { name: 'Washington', id: 6 },\n    { name: 'New Orleans', id: 7 },\n    { name: 'Memphis', id: 8 },\n    { name: 'Dallas', id: 9 },\n    { name: 'Minnesota', id: 10 },\n    { name: 'Los Angeles', id: 11 },\n    { name: 'Charlotte', id: 12 },\n    { name: 'Miami', id: 13 },\n    { name: 'Boston', id: 14 },];\n\nconst selectedStat = (state = DEFAULT_ARRAY, action) => {\n    switch (action.type) {\n        case 'SET_TOP_FOUR':\n        console.log('in set top four');\n        \n            state = action.payload;\n            return state;\n        case 'SET_PLACES':\n            state = action.payload;\n            return state;\n        case 'SET_MODE':\n            state = action.payload;\n            return state;\n        case 'UNSELECTED_STATS':\n            state = DEFAULT_ARRAY;\n            return state;\n        default:\n            return state;\n\n    }\n};\n\nexport default selectedStat;","const DEFAULT_STATE= [0];\n\nconst totalSims = (state = DEFAULT_STATE, action) => {\n    switch (action.type) {\n        case 'SET_TOTAL_SIMS':\n            state = action.payload;\n            return state;\n        case 'RESET_TOTAL_SIMS':\n            state = DEFAULT_STATE;\n            return state;\n        default:\n            return state;\n\n    }\n};\n\nexport default totalSims;","import { combineReducers } from 'redux';\nimport draftLotteryOrder from './FinalPlaceReducer.js';\nimport stats from './statsReducer.js';\nimport selectedStat from './selectedStat.js';\nimport totalSims from './totalSimsReducer.js';\n\nconst rootReducer = combineReducers({\n    draftLotteryOrder,\n    stats,\n    selectedStat,\n    totalSims,\n});\n\nexport default rootReducer;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* getStats(action) {\n    try {\n        const response = yield axios.get('/api/stats');\n        const stats = { type: 'SET_STATS', payload: response.data }\n        yield put(stats);\n    } catch (error) {\n        console.log('Error getting stats', error);\n    }\n}\n\nfunction* getTopFour(action) {\n    try {\n        console.log('in get top four');\n        \n        const response = yield axios.get('/api/stats/topFour');\n        const topFour = { type: 'SET_TOP_FOUR', payload: response.data }\n        yield put(topFour);\n    } catch (error) {\n        console.log('Error getting topFour', error);\n    }\n}\n\nfunction* getPlaces(action){\n    try {\n        const response = yield axios.post('/api/stats/places', action.payload);\n        const setPlaces = { type: 'SET_PLACES', payload: response.data }\n        yield put(setPlaces);\n    } catch (error) {\n        console.log('Error in axios POST:', error);\n    }\n}\n\nfunction* getMode(action) {\n    try {\n        const response = yield axios.get('/api/stats/mode');\n        const teamMode = { type: 'SET_MODE', payload: response.data }\n        yield put(teamMode);\n    } catch (error) {\n        console.log('Error getting getMode', error);\n    }\n}\n\nfunction* getStatsSaga() {\n    yield takeLatest('GET_STATS', getStats);\n    yield takeLatest('GET_TOP_FOUR', getTopFour);\n    yield takeLatest('GET_PLACES', getPlaces);\n    yield takeLatest('GET_MODE', getMode);\n}\n\nexport default getStatsSaga;","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* addSimulation(simulation) {\n    try {\n        yield axios.post('/api/simulations', simulation.payload);\n        const getLatest = { type: 'GET_LATEST_SIMULATION' }\n        yield put(getLatest);\n    } catch (error) {\n        console.log('Error in axios POST:', error);\n    }\n}\n\nfunction* getTotalSimulations(action){\n    try {\n        const response = yield axios.get('/api/simulations/total');\n        const total = { type: 'SET_TOTAL_SIMS', payload: response.data};\n        yield put(total);\n    } catch (error) {\n        console.log('Error in axios get', error); \n    }\n}\n\nfunction* getLatestSimulation(action){\n    try {\n        const response = yield axios.get('/api/simulations');\n        const simulation = { type: 'SET_ORDER', payload: response.data }\n        yield put(simulation);\n    } catch (error) {\n        console.log('Error getting sims', error);\n    }\n}\n\nfunction* deleteSimulations(action){\n    try{\n        yield axios.delete('api/simulations');\n        const originalOrder = { type: 'ORIGINAL_ORDER' }\n        yield put(originalOrder);\n        const resetCount = { type: 'RESET_TOTAL_SIMS' }\n        yield put(resetCount);\n        const resetStats = { type: 'UNSELECTED_STATS' }\n        yield put(resetStats);\n        const total = { type: 'GET_TOTAL_SIMS' }\n        yield put(total);\n\n    } catch (error){\n        console.log('Error deleting sims', error)\n    }\n}\n\nfunction* finalPlaceSaga() {\n    yield takeLatest('ADD_SIMULATION', addSimulation);\n    yield takeLatest('GET_LATEST_SIMULATION', getLatestSimulation);\n    yield takeLatest('GET_TOTAL_SIMS', getTotalSimulations);\n    yield takeLatest('DELETE_SIMS', deleteSimulations);\n}\n\nexport default finalPlaceSaga;","import { all } from 'redux-saga/effects';\nimport getStatsSaga from './statsSaga';\nimport finalPlaceSaga from './FinalPlaceSaga';\nexport default function* rootSaga() {\n    yield all([\n        getStatsSaga(),\n        finalPlaceSaga(),\n    ]);\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\n\nclass SimLotteryButton extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    runLottery = (event) => {\n        let draftOrder =\n            [{ name: \"New York\", seed: 1, place: 1 },\n            { name: \"Cleveland\", seed: 2, place: 2 },\n            { name: \"Phoenix\", seed: 3, place: 3 },\n            { name: \"Chicago\", seed: 4, place: 4 },\n            { name: \"Atlanta\", seed: 5, place: 5 },\n            { name: \"Washington\", seed: 6, place: 6 },\n            { name: \"New Orleans\", seed: 7, place: 7 },\n            { name: \"Memphis\", seed: 8, place: 8 },\n            { name: \"Atlanta\", seed: 9, place: 9 },\n            { name: \"Minnesota\", seed: 10, place: 10 },\n            { name: \"Los Angeles\", seed: 11, place: 11 },\n            { name: \"Charlotte\", seed: 12, place: 12 },\n            { name: \"Miami\", seed: 13, place: 13 },\n            { name: \"Boston\", seed: 14, place: 14 }];\n        let first = \"\";\n        let second = \"\";\n        let third = \"\";\n        let fourth = \"\";\n        while (fourth == \"\") {\n            let winner = {};\n            let winningNumber = (Math.floor(Math.random() * 1000) + 1);\n\n            if (winningNumber < 141) {\n                winner = { name: \"New York\", seed: 1 };\n            } else if (winningNumber >= 141 && winningNumber <= 278) {\n                winner = { name: \"Cleveland\", seed: 2 };\n            } else if (winningNumber >= 281 && winningNumber <= 420) {\n                winner = { name: \"Phoenix\", seed: 3 };\n            } else if (winningNumber >= 421 && winningNumber <= 545) {\n                winner = { name: \"Chicago\", seed: 4 };\n            } else if (winningNumber >= 546 && winningNumber <= 650) {\n                winner = { name: \"Atlanta\", seed: 5 };\n            } else if (winningNumber >= 651 && winningNumber <= 740) {\n                winner = { name: \"Washington\", seed: 6 };\n            } else if (winningNumber >= 741 && winningNumber <= 815) {\n                winner = { name: \"New Orleans\", seed: 7 };\n            } else if (winningNumber >= 816 && winningNumber <= 875) {\n                winner = { name: \"Atlanta\", seed: 8 };\n            } else if (winningNumber >= 876 && winningNumber <= 920) {\n                winner = { name: \"Memphis\", seed: 9 };\n            } else if (winningNumber >= 921 && winningNumber <= 950) {\n                winner = { name: \"Minnesota\", seed: 10 };\n            } else if (winningNumber >= 951 && winningNumber <= 970) {\n                winner = { name: \"Los Angeles\", seed: 11 };\n            } else if (winningNumber >= 971 && winningNumber <= 985) {\n                winner = { name: \"Charlotte\", seed: 12 };\n            } else if (winningNumber >= 986 && winningNumber <= 995) {\n                winner = { name: \"Miami\", seed: 13 };\n            } else if (winningNumber >= 996 && winningNumber <= 1000) {\n                winner = { name: \"Boston\", seed: 14 };\n            }\n\n            // determine first place.\n            if (first == \"\") {\n                first = winner;\n                // determine second place.\n                // determine second place or check to see that it has been fulfilled.\n            } else if (first != \"\" && second == \"\") {\n                // determine if the winner has already won a higher place. Re-roll if that\n                // happens.\n                if (first.seed != winner.seed) {\n                    second = winner;\n                }\n                // determine third place.\n            } else if (first != \"\" && second != \"\" && third == \"\") {\n                // determine if the winner has already won a higher place. Re-roll if that\n                // happens.\n                if (first.seed != winner.seed && second.seed != winner.seed) {\n                    third = winner;\n                }\n                // determine fourth place.\n            } else if (first != \"\" && second != \"\" && third != \"\" && fourth == \"\") {\n                // determine if the winner has already won a higher place. Re-roll if that\n                // happens.\n                if (first.seed != winner.seed && second.seed != winner.seed && third.seed != winner.seed) {\n                    fourth = winner;\n                }\n            }\n        }\n        let bottomTwelve = [];\n        let finalOrder = [];\n        let placeCounter = 5;\n\n        for (let i = 0; i < draftOrder.length; i++) {\n            if (draftOrder[i].seed != first.seed && draftOrder[i].seed != second.seed &&\n                draftOrder[i].seed != third.seed && draftOrder[i].seed != fourth.seed) {\n                bottomTwelve.push(draftOrder[i]);\n            } else if (draftOrder[i].seed == first.seed) {\n                draftOrder[i].place = 1;\n                finalOrder.push(draftOrder[i]);\n            } else if (draftOrder[i].seed == second.seed) {\n                draftOrder[i].place = 2;\n                finalOrder.push(draftOrder[i]);\n            } else if (draftOrder[i].seed == third.seed) {\n                draftOrder[i].place = 3;\n                finalOrder.push(draftOrder[i]);\n            } else if (draftOrder[i].seed == fourth.seed) {\n                draftOrder[i].place = 4;\n                finalOrder.push(draftOrder[i])\n            }\n        }\n\n        function propComparator(prop) {\n            return function (a, b) {\n                return a[prop] - b[prop];\n            }\n        }\n\n        bottomTwelve = bottomTwelve.sort(propComparator('seed'));\n        for (let i = 0; i < bottomTwelve.length; i++) {\n            bottomTwelve[i].place = placeCounter;\n            finalOrder.push(bottomTwelve[i]);\n            placeCounter++;\n        }\n\n        finalOrder = finalOrder.sort(propComparator('place'));\n        for (let i = 0; i < finalOrder.length; i++) {\n            if (finalOrder[i].seed == 9 && finalOrder[i].place < 5) {\n                finalOrder[i].name = \"Dallas\";\n            } else if (finalOrder[i].seed == 9 && finalOrder[i].place > 4) {\n                finalOrder[i].name = \"Atlanta\";\n            } else if (finalOrder[i].seed == 8 && finalOrder[i].place > 8) {\n                finalOrder[i].name = \"Boston\";\n            } else if (finalOrder[i].seed == 8 && finalOrder[i].place <= 8) {\n                finalOrder[i].name = \"Memphis\";\n            } else if (finalOrder[i].seed == 14 && finalOrder[i].place == 1) {\n                finalOrder[i].name = \"Sacramento\";\n            } else if (finalOrder[i].seed == 14 && finalOrder[i].place != 1) {\n                finalOrder[i].name = \"Boston\";\n            }\n        }\n        // let action = {type: 'GET_LATEST_SIMULATION'};\n        // this.props.dispatch(action);\n        // let action = {\n        //     type: 'SET_ORDER',\n        //     payload: {\n        //         first: first,\n        //         second: second,\n        //         third: third,\n        //         fourth: fourth\n        //     }\n        // }\n        // this.props.dispatch(action);\n\n        let simulation = { type: 'ADD_SIMULATION', payload: finalOrder }\n        console.log('sim', simulation.payload);\n        this.props.dispatch(simulation);\n    }\n\n    render() {\n        return (\n            <Button  variant=\"outlined\" onClick={this.runLottery}>Simulate Draft Lottery</Button>\n        )\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore\n});\nexport default connect(mapStateToProps)(SimLotteryButton);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './LotteryTeams.css';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from '@material-ui/core/Grid';\nimport SimLotteryButton from '../SimLotteryButton/SimLotteryButton.js';\n\nclass LotteryTeams extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        let action = { type: 'GET_LATEST_SIMULATION' }\n        this.props.dispatch(action);\n    }\n\n    render() {\n        let playerImage\n        this.props.reduxStore.draftLotteryOrder.map(team => {\n            if ((team.name == \"Minnesota\") && (team.place == 1)){\n                    playerImage = \"zionImage\";\n                } \n            else if ((team.name == \"Minnesota\") && (team.place == 2)){\n                    playerImage = \"morantImage\";\n                }\n            })\n       let tableContent = this.props.reduxStore.draftLotteryOrder.map(team => {\n           let jumpedFell = <h1>{team.place} </h1>;\n            if ((team.place - team.seed) * (-1) > 0) {\n                jumpedFell = <b className=\"green\"> (+{(team.place - team.seed) * (-1)})</b>\n            } else if ((team.place - team.seed) * (-1) < 0) {\n                jumpedFell = <b className=\"red\"> (-{(team.place - team.seed) * 1})</b>\n            }else{\n                jumpedFell = \"\";\n            }\n            \n           return <TableRow >\n               <TableCell className=\"tableCell\"><h3>{team.name}</h3></TableCell>\n               <TableCell className=\"tableCell\"><h3>{team.place}{jumpedFell}</h3></TableCell>\n            </TableRow>\n        })\n\n        return (\n            \n                <Grid className=\"tableContainer\"\n                    container xs\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\">\n                <Grid item xs className = \"simButton\">\n                <SimLotteryButton />\n                </Grid>\n     \n                <Table item xs >               \n                    <TableHead>\n                        <TableRow>\n                            <TableCell><h3>Team</h3></TableCell>\n                            <TableCell><h3>Pick</h3></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody className={playerImage}>\n                        {tableContent}\n                    </TableBody>                \n                </Table>\n                </Grid>\n           \n        )\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore\n});\nexport default connect(mapStateToProps)(LotteryTeams);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Home.css';\nimport '../index.css';\nimport LotteryTeams from '../LotteryTeams/LotteryTeams.js';\nimport Grid from '@material-ui/core/Grid';\nclass Home extends Component {\n    constructor() {\n        super()\n    }\n    \n    render() {\n        let leftImage = \"courtLeft\";\n        let rightImage = \"courtRight\";\n        let oldWolves;\n        let newWolves;\n        this.props.reduxStore.draftLotteryOrder.map(team => {\n            if ((team.name == \"Minnesota\") && (team.place == 1 || team.place == 2 || team.place == 3\n                || team.place == 4)) {\n                    rightImage = \"karlSmirk\";\n                    leftImage = \"karlBBQ\";\n                    oldWolves = <div className=\"oldWolves\"></div>;\n                    newWolves = <div className=\"newWolves\"></div>\n            }\n        })\n        return (\n            <div>\n                <Grid className=\"container\"\n                    container\n                    direction=\"row\"\n                    justify=\"space-between\"\n                    alignItems=\"flex-start\">\n                    <Grid item xs>\n                        {newWolves}\n                        <div className={leftImage}></div>\n                    </Grid>\n                    <Grid item xs>\n                        <LotteryTeams />\n                    </Grid>\n                    <Grid item xs>\n                        {oldWolves}\n                        <div className={rightImage}></div>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore\n});\nexport default connect(mapStateToProps)(Home);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport '../LotteryTeams/LotteryTeams.css'\n\nclass StatsTable extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        let order = { type: 'ORIGINAL_ORDER' }\n        this.props.dispatch(order);\n        let unselectedStats = { type: 'UNSELECTED_STATS' }\n        this.props.dispatch(unselectedStats);\n        let stats = { type: 'GET_STATS' }\n        this.props.dispatch(stats);\n        let total = { type: 'GET_TOTAL_SIMS'}\n        this.props.dispatch(total);\n    }\n\ngetStatByType = (event) => {\n    \n    if (event.target.value == 1 || event.target.value == 2 ||\n         event.target.value == 3 || event.target.value == 4){\n        let places = { type: 'GET_PLACES', payload: {place: event.target.value}}\n        this.props.dispatch(places);\n    } else if (event.target.value == 5) {\n        let topFour = { type: 'GET_TOP_FOUR' }\n        this.props.dispatch(topFour);\n    } else if (event.target.value == 6) {\n        let modePlace = { type: 'GET_MODE' }\n        this.props.dispatch(modePlace);\n    }\n}\n\nresetSimulations = () => {\n    let deleteSims = { type: 'DELETE_SIMS' }\n    this.props.dispatch(deleteSims);\n    let originalOrder = { type: 'ORIGINAL_ORDER' }\n    this.props.dispatch(originalOrder);\n    let resetCount = { type: 'RESET_TOTAL_SIMS' }\n    this.props.dispatch(resetCount);\n    let resetStats = { type: 'UNSELECTED_STATS' }\n    this.props.dispatch(resetStats);\n    let total = { type: 'GET_TOTAL_SIMS' }\n    this.props.dispatch(total);\n}\n    render() {\n\n        let statSelector = <select onChange = {this.getStatByType}>\n            <option value='' disabled selected > Select a Stat</option>\n            {this.props.reduxStore.stats.map(stat => {\n                return <option value = {stat.id}>{stat.name}</option>\n            })}\n        </select>;\n        let tableContent =\n            this.props.reduxStore.selectedStat.map(team => {\n                return <TableRow >\n                    <TableCell className=\"tableCell\"><h3>{team.id}. {team.name}</h3></TableCell>\n                    <TableCell className=\"tableCell\">\n                        <h3>{team.count}</h3>\n                    </TableCell>\n                </TableRow>\n            })\n        let simTotal;    \n        if(parseInt(this.props.reduxStore.totalSims.count == NaN)){\n            simTotal = <h3>Simulated {0} Times</h3>\n        }else{\n            simTotal = <h3>Simulated {parseInt(this.props.reduxStore.totalSims.count)} Times</h3>\n        }\n          \n        \n        return (\n            <Grid className=\"tableContainer\"\n                container xs\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\">\n                <Grid className = \"counter\" item xs >\n                    <tr > <td className=\"tableData\">{simTotal} </td>\n                    <td className=\"tableData\">\n                    <Button onClick = {this.resetSimulations} variant=\"outlined\" >RESET</Button>\n                    </td></tr>\n                </Grid>\n                <Table item xs >\n                    <TableHead>\n                        <TableRow>\n                            <TableCell><h3>Team</h3></TableCell>\n                            <TableCell><h3>{statSelector}</h3></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {tableContent}\n                    </TableBody>\n                </Table>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore\n});\nexport default connect(mapStateToProps)(StatsTable);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport StatTable from './StatTable.js';\nclass Stats extends Component {\n    constructor() {\n        super()\n    }\n    render() {\n        let leftImage = \"courtLeft\";\n        let rightImage = \"courtRight\";\n        let oldWolves;\n        let newWolves;\n        this.props.reduxStore.draftLotteryOrder.map(team => {\n            if ((team.name == \"Minnesota\") && (team.place == 1 || team.place == 2 || team.place == 3\n                || team.place == 4)) {\n                    rightImage = \"karlSmirk\";\n                    leftImage = \"karlBBQ\";\n                    oldWolves = <div className=\"oldWolves\"></div>;\n                    newWolves = <div className=\"newWolves\"></div>\n            }\n        })\n        return (\n            <div>\n                <Grid className=\"container\"\n                    container\n                    direction=\"row\"\n                    justify=\"space-between\"\n                    alignItems=\"flex-start\">\n                    <Grid item xs>\n                        {newWolves}\n                        <div className={leftImage}></div>\n                    </Grid>\n                    <Grid item xs>\n                        <StatTable />\n                    </Grid>\n                    <Grid item xs>\n                        {oldWolves}\n                        <div className={rightImage}></div>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = reduxStore => ({\n    reduxStore\n});\nexport default connect(mapStateToProps)(Stats);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport './Nav.css';\nclass Nav extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        let navStyle = \"nav\";\n        this.props.reduxStore.draftLotteryOrder.map(team => {\n            if ((team.name == \"Minnesota\") && (team.place == 1 || team.place == 2 || team.place == 3\n                || team.place == 4)) {\n                navStyle = \"wolvesNav\";\n                return navStyle;\n            }\n        })\n        return (\n            <div >\n                <Link className = {navStyle} to = \"/home\">\n                    Home\n                </Link>\n                <Link className = {navStyle} to = \"/stats\">\n                    Stats\n                </Link>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = reduxStore => ({\n    reduxStore,\n});\n\nexport default connect(mapStateToProps)(Nav);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Header.css';\nimport Nav from '../Nav/Nav';\nclass Header extends Component {\n    constructor(props){\n        super(props)\n    }\n    render() {\n        let headerStyle = \"head\";\n        this.props.reduxStore.draftLotteryOrder.map(team => {\n            if ((team.name == \"Minnesota\") && (team.place == 1 || team.place == 2 || team.place == 3\n                || team.place == 4)){\n                headerStyle= \"wolves\";\n                return headerStyle;\n            } \n        })\n        return(\n            <header className={headerStyle}>\n                <h1>Draft Lottery Simulator</h1>\n                <Nav />\n            </header>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore\n});\nexport default connect(mapReduxStoreToProps)(Header);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { HashRouter as Router, Route, Redirect, Switch,} from 'react-router-dom';\nimport Home from './Home/Home.js';\nimport Stats from './Stats/Stats.js';\nimport Header from './Header/Header.js';\nimport './index.css';\nclass App extends Component {\n  constructor(){\n    super()\n  }\n  render() {\n    return (\n      <div >\n        \n        <Router>\n          <Header />\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/home\" />\n            <Route \n              exact path = \"/home\"\n              component = {Home}/>\n            <Route\n              exact path=\"/stats\"\n              component={Stats} />\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = reduxStore => ({\n  reduxStore\n});\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './Redux/Reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './Redux/Sagas'; // imports ./redux/sagas/index.js\n\nimport App from './App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n    [sagaMiddleware, logger] :\n    [sagaMiddleware];\n\nconst store = createStore(\n    // tells the saga middleware to use the rootReducer\n    // rootSaga contains all of our other reducers\n    rootReducer,\n    // adds all middleware to our project including saga and logger\n    applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('react-root'),\n);\n"],"sourceRoot":""}